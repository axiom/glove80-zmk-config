/*
 * Copyright (c) 2020 The ZMK Contributors
 * Copyright (c) 2023 Innaworks Development Limited, trading as MoErgo
 *
 * SPDX-License-Identifier: MIT
 */
/* THIS FILE WAS GENERATED BY GLOVE80 LAYOUT EDITOR
 *
 * This file was generated automatically. You may or may not want to
 * edit it directly.
 */

#include <behaviors.dtsi>

/* Include all behaviour includes needed */

#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/rgb.h>

/* Automatically generated layer name #define */

#define LAYER_Base 0
#define LAYER_Lower 1
#define LAYER_Magic 2
#define LAYER_Gaming 3
#define LAYER_Symbols 4

/ {
    /* Glove80 system behavior & macros */

    behaviors {
        // For the "layer" key, it'd nice to be able to use it as either a shift or a toggle.
        // Configure it as a tap dance, so the first tap (or hold) is a &mo and the second tap is a &to

        lower: lower {
            compatible = "zmk,behavior-tap-dance";
            label = "LAYER_TAP_DANCE";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&mo LAYER_Lower>, <&to LAYER_Lower>;
        };

        symbol_gr: symbol_gr {
            compatible = "zmk,behavior-hold-tap";
            label = "SYMBOL_GR";
            bindings = <&kp>, <&sl>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            flavor = "balanced";
        };

        auto_shift: auto_shift {
            compatible = "zmk,behavior-hold-tap";
            label = "AUTO_SHIFT";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            flavor = "tap-preferred";
            quick-tap-ms = <(-1)>;
            require-prior-idle-ms = <100>;
        };

        hrm_left: hrm_left {
            compatible = "zmk,behavior-hold-tap";
            label = "HRM_LEFT";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <250>;
            require-prior-idle-ms = <25>;
            flavor = "balanced";
            hold-trigger-key-positions = <5 6 7 8 9 16 17 18 19 20 21 28 29 30 31 32 33 40 41 42 43 44 45 58 59 60 61 62 63 75 76 77 78 79 74 73>;
            hold-trigger-on-release;
        };

        hrm_right: hrm_right {
            compatible = "zmk,behavior-hold-tap";
            label = "HRM_RIGHT";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <250>;
            require-prior-idle-ms = <25>;
            flavor = "balanced";
            hold-trigger-key-positions = <0 1 2 3 4 10 11 12 13 14 15 22 23 24 25 26 27 34 35 36 37 38 39 46 47 48 49 50 51 64 65 66 67 68 69 70>;
            hold-trigger-on-release;
        };

        tap_layer_right: tap_layer_right {
            compatible = "zmk,behavior-hold-tap";
            label = "TAP_LAYER_RIGHT";
            bindings = <&mo>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            flavor = "tap-preferred";
            hold-trigger-key-positions = <0 1 2 3 4 10 11 12 13 14 15 22 23 24 25 26 27 34 35 36 37 38 39 46 47 48 49 50 51 64 65 66 67 68>;
            require-prior-idle-ms = <75>;
        };
    };
};

/ {
    macros {
        rgb_ug_status_macro: rgb_ug_status_macro {
            label = "RGB_UG_STATUS";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&rgb_ug RGB_STATUS>;
        };

        bt_0: bt_0 {
            label = "BT_0";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&out OUT_BLE &bt BT_SEL 0>;
        };

        bt_1: bt_1 {
            label = "BT_1";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&out OUT_BLE &bt BT_SEL 1>;
        };

        bt_2: bt_2 {
            label = "BT_2";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&out OUT_BLE &bt BT_SEL 2>;
        };

        bt_3: bt_3 {
            label = "BT_3";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&out OUT_BLE &bt BT_SEL 3>;
        };
    };
};

/ {
    magic: magic {
        compatible = "zmk,behavior-hold-tap";
        label = "MAGIC_HOLD_TAP";
        #binding-cells = <2>;
        flavor = "tap-preferred";
        tapping-term-ms = <200>;
        bindings = <&mo>, <&rgb_ug_status_macro>;
    };
};

/* #define for key positions */

#define POS_LH_T1 52
#define POS_LH_T2 53
#define POS_LH_T3 54
#define POS_LH_T4 69
#define POS_LH_T5 70
#define POS_LH_T6 71
#define POS_LH_C1R2 15
#define POS_LH_C1R3 27
#define POS_LH_C1R4 39
#define POS_LH_C1R5 51
#define POS_LH_C2R1 4
#define POS_LH_C2R2 14
#define POS_LH_C2R3 26
#define POS_LH_C2R4 38
#define POS_LH_C2R5 50
#define POS_LH_C2R6 68
#define POS_LH_C3R1 3
#define POS_LH_C3R2 13
#define POS_LH_C3R3 25
#define POS_LH_C3R4 37
#define POS_LH_C3R5 49
#define POS_LH_C3R6 67
#define POS_LH_C4R1 2
#define POS_LH_C4R2 12
#define POS_LH_C4R3 24
#define POS_LH_C4R4 36
#define POS_LH_C4R5 48
#define POS_LH_C4R6 66
#define POS_LH_C5R1 1
#define POS_LH_C5R2 11
#define POS_LH_C5R3 23
#define POS_LH_C5R4 35
#define POS_LH_C5R5 47
#define POS_LH_C5R6 65
#define POS_LH_C6R1 0
#define POS_LH_C6R2 10
#define POS_LH_C6R3 22
#define POS_LH_C6R4 34
#define POS_LH_C6R5 46
#define POS_LH_C6R6 64
#define POS_RH_T1 57
#define POS_RH_T2 56
#define POS_RH_T3 55
#define POS_RH_T4 74
#define POS_RH_T5 73
#define POS_RH_T6 72
#define POS_RH_C1R2 16
#define POS_RH_C1R3 28
#define POS_RH_C1R4 40
#define POS_RH_C1R5 58
#define POS_RH_C2R1 5
#define POS_RH_C2R2 17
#define POS_RH_C2R3 29
#define POS_RH_C2R4 41
#define POS_RH_C2R5 59
#define POS_RH_C2R6 75
#define POS_RH_C3R1 6
#define POS_RH_C3R2 18
#define POS_RH_C3R3 30
#define POS_RH_C3R4 42
#define POS_RH_C3R5 60
#define POS_RH_C3R6 76
#define POS_RH_C4R1 7
#define POS_RH_C4R2 19
#define POS_RH_C4R3 31
#define POS_RH_C4R4 43
#define POS_RH_C4R5 61
#define POS_RH_C4R6 77
#define POS_RH_C5R1 8
#define POS_RH_C5R2 20
#define POS_RH_C5R3 32
#define POS_RH_C5R4 44
#define POS_RH_C5R5 62
#define POS_RH_C5R6 78
#define POS_RH_C6R1 9
#define POS_RH_C6R2 21
#define POS_RH_C6R3 33
#define POS_RH_C6R4 45
#define POS_RH_C6R5 63
#define POS_RH_C6R6 79

/* Custom Defined Behaviors */

/ {
    macros {
        aa_macro: aa_macro {
            label = "aa_macro";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <40>;
            tap-ms = <40>;
            bindings = <&kp RA(W)>;
        };

        ae_macro: ae_macro {
            label = "ae_macro";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <40>;
            tap-ms = <40>;
            bindings = <&kp RA(Q)>;
        };

        oe_macro: oe_macro {
            label = "oe_macro";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <40>;
            tap-ms = <40>;
            bindings = <&kp RA(P)>;
        };

        quote_macro: quote_macro {
            label = "quote_macro";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <40>;
            tap-ms = <40>;
            bindings = <&kp SINGLE_QUOTE &kp SPACE>;
        };

        double_quote_macro: double_quote_macro {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LS(SINGLE_QUOTE) &kp SPACE>;
            label = "DOUBLE_QUOTE_MACRO";
        };

        grave_macro: grave_macro {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp GRAVE &kp SPACE>;
            label = "GRAVE_MACRO";
        };

        tilde_macro: tilde_macro {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LS(GRAVE) &kp SPACE>;
            label = "TILDE_MACRO";
        };
    };
};

/* Automatically generated keymap */

/ {
    behaviors {
    };

    keymap {
        compatible = "zmk,keymap";

        layer_Base {
            bindings = <
&kp F1                                     &kp F2                 &kp F3                 &kp F4                    &kp F5                                                                                                                                                &kp F6                    &kp F7                      &kp F8                 &kp F9                  &kp F10
&auto_shift LS(LEFT_BRACKET) LEFT_BRACKET  &auto_shift N1 LS(N1)  &auto_shift N2 LS(N2)  &auto_shift N3 LS(N3)     &auto_shift N4 LS(N4)   &auto_shift N5 LS(N5)                                                                                  &auto_shift N6 RS(N6)  &auto_shift N7 RS(N7)     &auto_shift N8 RS(N8)       &auto_shift N9 RS(N9)  &auto_shift N0 RS(N0)   &auto_shift RS(RIGHT_BRACKET) RIGHT_BRACKET
&kp TAB                                    &aa_macro              &kp COMMA              &kp DOT                   &kp P                   &kp Y                                                                                                  &kp F                  &kp G                     &tap_layer_right 4 C        &kp R                  &kp L                   &kp FSLH
&kp ESCAPE                                 &hrm_left LEFT_GUI A   &hrm_left LEFT_ALT O   &hrm_left LEFT_CONTROL E  &hrm_left LEFT_SHIFT U  &kp I                                                                                                  &kp D                  &hrm_right RIGHT_SHIFT H  &hrm_right RIGHT_CONTROL T  &hrm_right LEFT_ALT N  &hrm_right RIGHT_GUI S  &kp SEMI
&kp LEFT_CONTROL                           &ae_macro              &kp Q                  &kp J                     &kp K                   &kp X                  &kp LSHFT  &kp LCTRL  &lower    &kp LGUI                &kp RCTRL    &kp RSHFT  &kp B                  &kp M                     &kp W                       &kp V                  &kp Z                   &auto_shift HOME PAGE_UP
&magic LAYER_Magic 0                       &kp BSLH               &oe_macro              &kp LEFT                  &kp RIGHT                                      &kp BSPC   &kp DEL    &kp LALT  &symbol_gr RIGHT_ALT 4  &lt 4 ENTER  &kp SPACE                         &kp UP                    &kp DOWN                    &kp MINUS              &kp EQUAL               &auto_shift END PAGE_DOWN
            >;
        };

        layer_Lower {
            bindings = <
&kp C_BRI_DN          &kp C_BRI_UP  &kp C_PREV      &kp C_NEXT      &kp C_PP                                                                                           &kp C_MUTE  &kp C_VOL_DN  &kp C_VOL_UP  &none            &kp PAUSE_BREAK
&to 3                 &none         &none           &none           &none            &kp HOME                                                   &kp LEFT_PARENTHESIS   &kp KP_NUM  &kp KP_EQUAL  &kp KP_SLASH  &kp KP_MULTIPLY  &kp PRINTSCREEN
&trans                &none         &none           &kp UP_ARROW    &none            &kp END                                                    &kp RIGHT_PARENTHESIS  &kp KP_N7   &kp KP_N8     &kp KP_N9     &kp KP_MINUS     &kp SCROLLLOCK
&trans                &none         &kp LEFT_ARROW  &kp DOWN_ARROW  &kp RIGHT_ARROW  &kp PG_UP                                                  &kp PERCENT            &kp KP_N4   &kp KP_N5     &kp KP_N6     &kp KP_PLUS      &trans
&trans                &kp K_APP     &none           &kp F11         &kp F12          &kp PG_DN  &trans  &trans  &to 0   &trans  &trans  &trans  &kp COMMA              &kp KP_N1   &kp KP_N2     &kp KP_N3     &kp KP_ENTER     &trans
&magic LAYER_Magic 0  &kp CAPS      &kp INS         &kp F11         &kp F12                     &trans  &trans  &trans  &trans  &trans  &trans                         &kp KP_N0   &kp KP_N0     &kp KP_DOT    &kp KP_ENTER     &trans
            >;
        };

        layer_Magic {
            bindings = <
&bt BT_CLR   &none            &none            &none            &none                                                                                     &none  &none  &none  &none  &bt BT_CLR_ALL
&none        &none            &none            &none            &none            &none                                                             &none  &none  &none  &none  &none  &none
&none        &rgb_ug RGB_SPI  &rgb_ug RGB_SAI  &rgb_ug RGB_HUI  &rgb_ug RGB_BRI  &rgb_ug RGB_TOG                                                   &none  &none  &none  &none  &none  &none
&bootloader  &rgb_ug RGB_SPD  &rgb_ug RGB_SAD  &rgb_ug RGB_HUD  &rgb_ug RGB_BRD  &rgb_ug RGB_EFF                                                   &none  &none  &none  &none  &none  &bootloader
&sys_reset   &none            &none            &none            &none            &none            &bt_2  &bt_3  &none         &none  &none  &none  &none  &none  &none  &none  &none  &sys_reset
&none        &none            &none            &none            &none                             &bt_0  &bt_1  &out OUT_USB  &none  &none  &none         &none  &none  &none  &none  &none
            >;
        };

        layer_Gaming {
            bindings = <
&trans  &trans            &trans  &trans  &trans                                                                          &trans  &trans  &trans  &trans  &trans
&trans  &trans            &trans  &trans  &trans  &trans                                                          &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans            &kp Q   &kp W   &kp E   &kp R                                                           &trans  &trans  &trans  &trans  &trans  &trans
&trans  &kp LEFT_CONTROL  &kp A   &kp S   &kp D   &kp F                                                           &trans  &trans  &trans  &trans  &trans  &trans
&trans  &kp LEFT_SHIFT    &kp Z   &kp X   &kp C   &kp V   &kp LEFT_SHIFT  &trans  &to 0   &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans            &trans  &trans  &trans          &kp SPACE       &trans  &trans  &trans  &trans  &trans          &trans  &trans  &trans  &trans  &trans
            >;
        };

        layer_Symbols {
            bindings = <
&trans  &trans        &trans                &trans                 &trans                                                                             &trans     &trans         &trans         &trans     &trans
&trans  &trans        &trans                &trans                 &trans             &trans                                                  &trans  &trans     &trans         &trans         &trans     &trans
&trans  &kp LS(N1)    &kp LEFT_BRACKET      &kp RIGHT_BRACKET      &kp LS(BACKSLASH)  &trans                                                  &trans  &trans     &kp ENTER      &trans         &trans     &trans
&trans  &kp LS(N9)    &kp LS(LEFT_BRACKET)  &kp LS(RIGHT_BRACKET)  &kp LS(N0)         &trans                                                  &none   &kp EQUAL  &kp LS(MINUS)  &kp LS(EQUAL)  &kp MINUS  &trans
&trans  &tilde_macro  &double_quote_macro   &quote_macro           &grave_macro       &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans     &trans         &trans         &trans     &trans
&trans  &trans        &trans                &trans                 &trans                     &trans  &trans  &trans  &trans  &trans  &trans          &trans     &trans         &trans         &trans     &trans
            >;
        };
    };
};
